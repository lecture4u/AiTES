Prefix(swrl:=<http://www.w3.org/2003/11/swrl#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(var2:=<urn:http://www.w3.org/2003/11/swrl#>)
Prefix(var:=<urn:swrl#>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(swrlb:=<http://www.w3.org/2003/11/swrlb#>)
Prefix(:=<http://com.github.aites/ontologies/smarthome.owl#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)

Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://com.github.aites/ontologies/smarthome.owl>
    Declaration(Class(:IoTEnvdata))
    Declaration(Class(:SHEdata))
    Declaration(Class(:PSoverRule))
    Declaration(Class(:PSunderRule))
    Declaration(Class(:TempertureHotRule))
    Declaration(Class(:TempertureColdRule))
    Declaration(Class(:PositionNearRule))
    Declaration(Class(:PositionInRule))
    Declaration(Class(:SHneedPlanRule1))
    Declaration(Class(:SHneedPlanRule2))
    Declaration(Class(:SHneedPlanRule3))
    Declaration(DataProperty(:hasPS))
    Declaration(DataProperty(:hasTemperture))
    Declaration(DataProperty(:hasPosition))
    Declaration(DataProperty(:otLa))
    Declaration(DataProperty(:otRo))
    Declaration(DataProperty(:thridLa))
    Declaration(DataProperty(:thridRo))
    Declaration(DataProperty(:forthLa))
    Declaration(DataProperty(:forthRo))
    Declaration(DataProperty(:positionState))
    Declaration(DataProperty(:tempertureState))
    Declaration(DataProperty(:psState))
    Declaration(ObjectProperty(:hasUser))
    Declaration(ObjectProperty(:isUser))
    Declaration(NamedIndividual(:SHEdata1))
    Declaration(NamedIndividual(:SHEdata2))
    Declaration(NamedIndividual(:SHEdata20180914))
    ClassAssertion(:SHEdata :SHEdata1)
    ClassAssertion(:SHEdata :SHEdata2)
    ClassAssertion(:SHEdata :SHEdata20180914)
    DataPropertyAssertion(:hasPS :SHEdata2 "2400"^^xsd:double)
    DataPropertyAssertion(:hasPS :SHEdata1 "2400"^^xsd:double)
    DataPropertyAssertion(:otLa :SHEdata1 "127.07"^^xsd:string)
    DataPropertyAssertion(:otRo :SHEdata1 "37.19"^^xsd:string)
    DataPropertyAssertion(:thridLa :SHEdata1 "43"^^xsd:int)
    DataPropertyAssertion(:thridRo :SHEdata1 "24"^^xsd:int)
    DataPropertyAssertion(:forthLa :SHEdata1 "235"^^xsd:int)
    DataPropertyAssertion(:forthRo :SHEdata1 "211"^^xsd:int)
    DataPropertyAssertion(:psState :SHEdata20180914 "over"^^xsd:string)

    DataPropertyAssertion(:tempertureState :SHEdata20180914 "cold"^^xsd:string)

    DataPropertyAssertion(:positionState :SHEdata20180914 "out"^^xsd:string)

    SubClassOf(:SHEdata :IoTEnvdata)
    DLSafeRule(
        Annotation(rdfs:comment "smart home environment power consumtion is over?")
        Body(
            ClassAtom(:SHEdata Variable(var:c))
            DataPropertyAtom(:hasPS Variable(var:c) Variable(var:power))
            BuiltInAtom(swrlb:greaterThan Variable(var:power) "1300"^^xsd:double)
        )
        Head(
            ClassAtom(:PSoverRule Variable(var:c))
        )
    )
    DLSafeRule(
        Annotation(rdfs:comment "smart home environment power consumtion is under?")
        Body(
            ClassAtom(:SHEdata Variable(var:c))
            DataPropertyAtom(:hasPS Variable(var:c) Variable(var:power))
            BuiltInAtom(swrlb:lessThan Variable(var:power) "600"^^xsd:double)
        )
        Head(
            ClassAtom(:PSunderRule Variable(var:c))
        )
    )
    DLSafeRule(
        Annotation(rdfs:comment "smart home environment temperture is hot?")
        Body(
            ClassAtom(:SHEdata Variable(var:c))
            DataPropertyAtom(:hasTemperture Variable(var:c) Variable(var:tem))
            BuiltInAtom(swrlb:greaterThan Variable(var:tem) "28"^^xsd:int)
        )
        Head(
            ClassAtom(:TempertureHotRule Variable(var:c))
        )
    )
    DLSafeRule(
        Annotation(rdfs:comment "smart home environment temperture is cold?")
        Body(
            ClassAtom(:SHEdata Variable(var:c))
            DataPropertyAtom(:hasTemperture Variable(var:c) Variable(var:tem))
            BuiltInAtom(swrlb:lessThan Variable(var:tem) "18"^^xsd:int)
        )
        Head(
            ClassAtom(:TempertureColdRule Variable(var:c))
        )
    )
    DLSafeRule(
        Annotation(rdfs:comment "User GPS Data is nearHome?")
        Body(
            ClassAtom(:SHEdata Variable(var:c))
            DataPropertyAtom(:otLa Variable(var:c) Variable(var:otl))
            DataPropertyAtom(:otRo Variable(var:c) Variable(var:otr))
            DataPropertyAtom(:thridLa Variable(var:c) Variable(var:tl))
            DataPropertyAtom(:thridRo Variable(var:c) Variable(var:tr))
            DataPropertyAtom(:forthLa Variable(var:c) Variable(var:fl))
            DataPropertyAtom(:forthRo Variable(var:c) Variable(var:fr))
            BuiltInAtom(swrlb:equal Variable(var:otl) "127.07"^^xsd:string)
            BuiltInAtom(swrlb:equal Variable(var:otr) "37.19"^^xsd:string)
        )
        Head(
            ClassAtom(:PositionNearRule Variable(var:c))
        )
    )
    DLSafeRule(
        Annotation(rdfs:comment "User GPS Data is inHome?")
        Body(
            ClassAtom(:SHEdata Variable(var:c))
            DataPropertyAtom(:otLa Variable(var:c) Variable(var:otl))
            DataPropertyAtom(:otRo Variable(var:c) Variable(var:otr))
            DataPropertyAtom(:thridLa Variable(var:c) Variable(var:tl))
            DataPropertyAtom(:thridRo Variable(var:c) Variable(var:tr))
            DataPropertyAtom(:forthLa Variable(var:c) Variable(var:fl))
            DataPropertyAtom(:forthRo Variable(var:c) Variable(var:fr))
            BuiltInAtom(swrlb:equal Variable(var:otl) "127.07"^^xsd:string)
            BuiltInAtom(swrlb:equal Variable(var:otr) "37.19"^^xsd:string)
            BuiltInAtom(swrlb:equal Variable(var:tl) "43"^^xsd:int)
            BuiltInAtom(swrlb:equal Variable(var:tr) "24"^^xsd:int)
        )
        Head(
            ClassAtom(:PositionInRule Variable(var:c))
        )
    )
    DLSafeRule(
        Annotation(rdfs:comment "rule system need plan -1")
        Body(
            ClassAtom(:SHEdata Variable(var:c))
            DataPropertyAtom(:positionState Variable(var:c) Variable(var:po))
            DataPropertyAtom(:tempertureState Variable(var:c) Variable(var:tem))
            DataPropertyAtom(:psState Variable(var:c) Variable(var:ps))
            BuiltInAtom(swrlb:equal Variable(var:po) "out"^^xsd:string)
            BuiltInAtom(swrlb:equal Variable(var:tem) "warm"^^xsd:string)
            BuiltInAtom(swrlb:equal Variable(var:ps) "over"^^xsd:string)
        )
        Head(
            ClassAtom(:SHneedPlanRule1 Variable(var:c))
        )
    )
    DLSafeRule(
        Annotation(rdfs:comment "rule system need plan -2")
        Body(
            ClassAtom(:SHEdata Variable(var:c))
            DataPropertyAtom(:positionState Variable(var:c) Variable(var:po))
            DataPropertyAtom(:tempertureState Variable(var:c) Variable(var:tem))
            DataPropertyAtom(:psState Variable(var:c) Variable(var:ps))
            BuiltInAtom(swrlb:equal Variable(var:po) "out"^^xsd:string)
            BuiltInAtom(swrlb:equal Variable(var:tem) "cold"^^xsd:string)
            BuiltInAtom(swrlb:equal Variable(var:ps) "over"^^xsd:string)
        )
        Head(
            ClassAtom(:SHneedPlanRule2 Variable(var:c))
        )
    )
    DLSafeRule(
        Annotation(rdfs:comment "rule system need plan -3")
        Body(
            ClassAtom(:SHEdata Variable(var:c))
            DataPropertyAtom(:positionState Variable(var:c) Variable(var:po))
            DataPropertyAtom(:tempertureState Variable(var:c) Variable(var:tem))
            DataPropertyAtom(:psState Variable(var:c) Variable(var:ps))
            BuiltInAtom(swrlb:equal Variable(var:po) "near"^^xsd:string)
            BuiltInAtom(swrlb:equal Variable(var:tem) "warm"^^xsd:string)
            BuiltInAtom(swrlb:equal Variable(var:ps) "over"^^xsd:string)
        )
        Head(
            ClassAtom(:SHneedPlanRule3 Variable(var:c))
        )
    )
)